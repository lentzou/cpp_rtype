cmake_minimum_required(VERSION 3.5)
project(cpp_rtype)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_VERBOSE_MAKEFILE OFF)
set(CMAKE_WARN_DEPRECATED OFF)

if (UNIX)
    set(Plateform "Unix")
    message("Unix Plateform Detected")
    set(CMAKE_CXX_FLAGS "-ldl -lboost_system  -lsfml-graphics -lsfml-window -lsfml-system -lpthread")
	include_directories(Protocol)
	include_directories(Common)
	include_directories(Tools)
	include_directories(Graph)

	FILE(GLOB Server ./Server/*.cpp Protocol/*.h Common/*.cpp)
	FILE(GLOB Client ./Client/*.cpp Protocol/*.h Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Game ./Game/Graphic/*.cpp Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Input ./Game/Input/*.cpp Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Sound ./Game/Sound/*.cpp Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Graph ./Graph/*.cpp Common/*.cpp Tools/*.cpp)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Debug)
	add_executable(client ${Client})
	add_executable(server ${Server})

    find_package(Threads)
    find_package(Boost 1.58 COMPONENTS filesystem regex)
    target_link_libraries (client ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(client ${catkin_LIBRARIES} libdl.so)

    target_link_libraries (server ${CMAKE_THREAD_LIBS_INIT})
    set(Boost_USE_STATIC_LIBS        ON)
    set(Boost_USE_MULTITHREADED      ON)
    set(Boost_USE_STATIC_RUNTIME    OFF)
    if(Boost_FOUND)
        message(STATUS "It works!")
        include_directories(${Boost_INCLUDE_DIRS})
	target_link_libraries(client ${Boost_LIBRARIES})
        target_link_libraries(server ${Boost_LIBRARIES})
      endif()

      set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Lib/DLL/Game/Linux/Debug)
      
     add_library(game SHARED ${Dll_Game})
     add_library(input SHARED ${Dll_Input})
     add_library(sound SHARED ${Dll_Sound})
      

   set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Lib/DLL/Graphic/Linux/Debug)
      
      add_library(graph SHARED ${Dll_Graph})

	#set(SFML_STATIC_LIBRARIES TRUE)
	set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2/share/SFML/cmake/Modules ${CMAKE_MODULE_PATH})
#	set(SFML_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2)
        find_package( SFML 2 REQUIRED COMPONENTS audio graphics window system)
	if(SFML_FOUND)
	  include_directories(${SFML_INCLUDE_DIR})
	  target_link_libraries(graph ${SFML_LIBRARIES})
	  target_link_libraries(graph ${SFML_DEPENDENCIES})
	  #target_link_libraries(client ${SFML_LIBRARIES})
	  #target_link_libraries(client ${SFML_DEPENDENCIES})
	endif()
endif(UNIX)

if (WIN32)
    set(Boost_Path ${CMAKE_CURRENT_SOURCE_DIR}/Lib/Boost/include/boost-1_65_1)
    set(Boost_INCLUDE_DIR "${Boost_Path}")
    find_package(Boost 1.65.1)
    if(Boost_FOUND)
        message(STATUS "It works!")
        include_directories(${Boost_INCLUDE_DIRS})
        link_directories(${CMAKE_CURRENT_SOURCE_DIR}/Lib/Boost/lib/)
    endif()
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	include_directories(Protocol)
	include_directories(Common)
	include_directories(Tools)

	FILE(GLOB Server ./Server/*.cpp Protocol/*.h Common/*.cpp)
	FILE(GLOB Client ./Client/*.cpp Protocol/*.h Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Game ./Game/Graphic/*.cpp Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Input ./Game/Input/*.cpp Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Sound ./Game/Sound/*.cpp Common/*.cpp Tools/*.cpp)
	FILE(GLOB Dll_Graph ./Graph/*.cpp Common/*.cpp Tools/*.cpp)
	add_executable(client ${Client})
	add_executable(server ${Server})

	#create dll
	  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Lib/DLL/Game/Windows/)
      
     add_library(game SHARED ${Dll_Game})
     add_library(input SHARED ${Dll_Input})
     add_library(sound SHARED ${Dll_Sound})
      

   set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Lib/DLL/Graphic/Windows/)
      
      add_library(graph SHARED ${Dll_Graph})
# Find SFML
	set(SFML_STATIC_LIBRARIES TRUE)
	set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2/cmake/Modules ${CMAKE_MODULE_PATH})
	set(SFML_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2)
	find_package( SFML 2 REQUIRED COMPONENTS audio graphics window system)
	if(SFML_FOUND)
		include_directories(${SFML_INCLUDE_DIR})
		target_link_libraries(graph ${SFML_DEPENDENCIES})
		target_link_libraries(graph ${SFML_LIBRARIES})
#	  else()
#        #set(SFML_ROOT "" CACHE PATH "SFML top-level directory")
#        message("\n-> SFML directory not found. Set SFML_ROOT to SFML's top-level path (containing \"include\" and \"lib\" directories).")
#        message("-> Make sure the SFML libraries with the same configuration (Release/Debug, Static/Dynamic) exist.\n")
	endif()    
endif(WIN32)
